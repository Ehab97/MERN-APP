{"ast":null,"code":"import { ActionType } from '../action-types';\nimport client from '../../utlis/api/index';\nexport const searchRepositories = term => {\n  return async dispatch => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES\n    });\n\n    try {\n      const {\n        data\n      } = await client.get('/search', {\n        params: {\n          text: term\n        }\n      });\n      const names = data.objects.map(result => {\n        return result.package.name;\n      });\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Volumes/SSD - Data/Users/mohamed/projects/reactjsApp/react-setup/src/store/action-creator/index.ts"],"names":["ActionType","client","searchRepositories","term","dispatch","type","SEARCH_REPOSITORIES","data","get","params","text","names","objects","map","result","package","name","SEARCH_REPOSITORIES_SUCCESS","payload","err","SEARCH_REPOSITORIES_ERROR","message"],"mappings":"AAEA,SAASA,UAAT,QAA2B,iBAA3B;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAkB;AAClD,SAAO,MAAOC,QAAP,IAAsC;AAC3CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,UAAU,CAACM;AADV,KAAD,CAAR;;AAIA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMN,MAAM,CAACO,GAAP,CACrB,SADqB,EAErB;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAEP;AADA;AADV,OAFqB,CAAvB;AASA,YAAMQ,KAAK,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAiB;AAC9C,eAAOA,MAAM,CAACC,OAAP,CAAeC,IAAtB;AACD,OAFa,CAAd;AAIAZ,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACiB,2BADV;AAEPC,QAAAA,OAAO,EAAEP;AAFF,OAAD,CAAR;AAID,KAlBD,CAkBE,OAAOQ,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEL,UAAU,CAACoB,yBADV;AAEPF,QAAAA,OAAO,EAAEC,GAAG,CAACE;AAFN,OAAD,CAAR;AAID;AACF,GA7BD;AA8BD,CA/BM","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport client from '../../utlis/api/index';\n\nexport const searchRepositories = (term: string) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES,\n    });\n\n    try {\n      const { data } = await client.get(\n        '/search',\n        {\n          params: {\n            text: term,\n          },\n        }\n      );\n\n      const names = data.objects.map((result: any) => {\n        return result.package.name;\n      });\n\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}