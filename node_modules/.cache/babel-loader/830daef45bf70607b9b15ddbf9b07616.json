{"ast":null,"code":"var _jsxFileName = \"/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { validate } from \"../../../utlis/validations/validator\";\nimport \"./input.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators)\n      };\n\n    case \"TOUCH\":\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const Input = _ref => {\n  _s();\n\n  let {\n    name,\n    type = \"text\",\n    value,\n    onInput,\n    placeholder,\n    className,\n    style,\n    label,\n    labelClass,\n    id,\n    element,\n    row = 3,\n    errorText,\n    validators\n  } = _ref;\n  let elementType;\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      value: event.target.value,\n      validators\n    });\n    console.log(\"inputState\", inputState);\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  React.useEffect(() => {\n    onInput(id, inputState.value, inputState.isValid);\n  }, []);\n\n  if (element === \"input\") {\n    elementType = /*#__PURE__*/_jsxDEV(\"input\", {\n      //  name={name}\n      type: type,\n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className}\n      //  style={style}\n      ,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  } else if (element === \"textarea\") {\n    elementType = /*#__PURE__*/_jsxDEV(\"textarea\", {\n      //  name={name}\n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className}\n      //  style={style}\n      ,\n      id: id,\n      rows: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  } else if (element === \"select\") {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control \n    ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), elementType, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 55\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"040u3CG8qy1hFSREyiE/x1mTw04=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx"],"names":["React","validate","inputReducer","state","action","type","value","isValid","validators","isTouched","Input","name","onInput","placeholder","className","style","label","labelClass","id","element","row","errorText","elementType","inputState","dispatch","useReducer","changeHandler","event","target","console","log","touchHandler","useEffect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { actionCreators } from \"../../../store\";\nimport { validate } from \"../../../utlis/validations/validator\";\n\nimport \"./input.scss\";\n\ninterface InputProps {\n  name?: string;\n  type?: string;\n  value?: string;\n  onInput?: (x:any,y:any,z:any) => void;\n  placeholder?: string;\n  className?: string;\n  style?: object;\n  label?: string;\n  labelClass?: string;\n  id?: string;\n  element?: \"input\" | \"textarea\" | \"select\";\n  row?: number;\n  errorText?: string;\n  validators?: any[];\n}\nconst inputReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\nexport const Input: React.FC<InputProps> = ({\n  name,\n  type = \"text\",\n  value,\n  onInput,\n  placeholder,\n  className,\n  style,\n  label,\n  labelClass,\n  id,\n  element,\n  row = 3,\n  errorText,\n  validators,\n}) => {\n  let elementType;\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: \"\",\n    isValid: false,\n    isTouched: false,\n  });\n  const changeHandler = (\n    event: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => {\n    dispatch({\n      type: \"CHANGE\",\n      value: event.target.value,\n      validators,\n    });\n    console.log(\"inputState\", inputState);\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  React.useEffect(()=>{\n    onInput(id,inputState.value,inputState.isValid)\n  },[])\n  if (element === \"input\") {\n    elementType = (\n      <input\n        //  name={name}\n        type={type}\n        value={inputState.value}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        placeholder={placeholder}\n        //  className={className}\n        //  style={style}\n        id={id}\n      />\n    );\n  } else if (element === \"textarea\") {\n    elementType = (\n      <textarea\n        //  name={name}\n        value={inputState.value}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        placeholder={placeholder}\n        //  className={className}\n        //  style={style}\n        id={id}\n        rows={row}\n      />\n    );\n  } else if (element === \"select\") {\n  }\n\n  return (\n    <div\n      className={`form-control \n    ${!inputState.isValid && inputState.isTouched && \"form-control--invalid\"}`}\n    >\n      <label htmlFor={id}>{label}</label>\n      {elementType}\n      {!inputState.isValid && inputState.isTouched && <p>{errorText}</p>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}