{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        i;\n\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialState, initialFormValidity) => {\n  _s();\n\n  const [formState, dispatch] = React.useReducer(formReducer, {\n    inputs: initialState,\n    isValid: initialFormValidity\n  });\n  const inputHandler = React.useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      isValid: formValidity\n    });\n  }, []);\n  return [formState, inputHandler, setFormData];\n};\n\n_s(useForm, \"MJYyUHAG9FpTcD0ofW45sN+KbHo=\");","map":{"version":3,"sources":["/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/app/hooks/useForm.tsx"],"names":["React","useCallback","formReducer","state","action","type","formIsValid","inputId","inputs","i","isValid","value","useForm","initialState","initialFormValidity","formState","dispatch","useReducer","inputHandler","id","setFormData","inputData","formValidity"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,WAAd,QAA4C,OAA5C;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAC7C,UAAQA,MAAM,CAACC,IAAf;AAEA,SAAK,cAAL;AACQ,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AAClCC,QAAAA,CAAC;;AACD,YAAIF,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC9BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACM,OAApC;AACD,SAFD,MAEO;AACLJ,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBG,OAAnD;AACD;AACF;;AACD,aAAO,EACL,GAAGP,KADE;AAELK,QAAAA,MAAM,EAAE,EACN,GAAGL,KAAK,CAACK,MADH;AAEN,WAACJ,MAAM,CAACG,OAAR,GAAkB;AAAEI,YAAAA,KAAK,EAAEP,MAAM,CAACO,KAAhB;AAAuBD,YAAAA,OAAO,EAAEN,MAAM,CAACM;AAAvC;AAFZ,SAFH;AAMLA,QAAAA,OAAO,EAAEJ;AANJ,OAAP;;AAQR,SAAK,UAAL;AACY,aAAM;AACFE,QAAAA,MAAM,EAACJ,MAAM,CAACI,MADZ;AAEFE,QAAAA,OAAO,EAACN,MAAM,CAACE;AAFb,OAAN;;AAIV;AACE,aAAOH,KAAP;AA1BJ;AA4BD,CA7BH;;AA+BA,OAAO,MAAMS,OAAO,GAAG,CAACC,YAAD,EAAoBC,mBAApB,KAAoD;AAAA;;AACvE,QAAM,CAACC,SAAD,EAAWC,QAAX,IAAsBhB,KAAK,CAACiB,UAAN,CAAiBf,WAAjB,EAA6B;AACrDM,IAAAA,MAAM,EAAEK,YAD6C;AAErDH,IAAAA,OAAO,EAAEI;AAF4C,GAA7B,CAA5B;AAIA,QAAMI,YAAY,GAAGlB,KAAK,CAACC,WAAN,CAAkB,CAACkB,EAAD,EAAKR,KAAL,EAAYD,OAAZ,KAAwB;AAC3DM,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,cADC;AAEPM,MAAAA,KAAK,EAAEA,KAFA;AAGPD,MAAAA,OAAO,EAAEA,OAHF;AAIPH,MAAAA,OAAO,EAAEY;AAJF,KAAD,CAAR;AAMD,GAPkB,EAOhB,EAPgB,CAArB;AAQC,QAAMC,WAAW,GAACnB,WAAW,CAAC,CAACoB,SAAD,EAAeC,YAAf,KAAkC;AACzDN,IAAAA,QAAQ,CAAC;AACLX,MAAAA,IAAI,EAAC,UADA;AAELG,MAAAA,MAAM,EAACa,SAFF;AAGLX,MAAAA,OAAO,EAACY;AAHH,KAAD,CAAR;AAKN,GAN4B,EAM3B,EAN2B,CAA7B;AAOD,SAAO,CAACP,SAAD,EAAWG,YAAX,EAAwBE,WAAxB,CAAP;AACH,CArBM;;GAAMR,O","sourcesContent":["import React,{useCallback,useReducer} from  'react';\n\nconst formReducer = (state: any, action: any) => {\n    switch (action.type) {\n    \n    case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n              i\n              if (inputId === action.inputId) {\n                formIsValid = formIsValid && action.isValid;\n              } else {\n                formIsValid = formIsValid && state.inputs[inputId].isValid;\n              }\n            }\n            return {\n              ...state,\n              inputs: {\n                ...state.inputs,\n                [action.inputId]: { value: action.value, isValid: action.isValid }\n              },\n              isValid: formIsValid\n            };\n    case 'SET_DATA':\n                return{\n                    inputs:action.inputs,\n                    isValid:action.formIsValid\n                }\n      default:\n        return state;\n    }\n  };\n\nexport const useForm = (initialState: any, initialFormValidity:boolean) => {\n    const [formState,dispatch ]=React.useReducer(formReducer,{\n        inputs: initialState,\n        isValid: initialFormValidity\n    })\n    const inputHandler = React.useCallback((id, value, isValid) => {\n        dispatch({\n          type: 'INPUT_CHANGE',\n          value: value,\n          isValid: isValid,\n          inputId: id\n        });\n      }, []);\n     const setFormData=useCallback((inputData:any,formValidity:any)=>{\n            dispatch({\n                type:'SET_DATA',\n                inputs:inputData,\n                isValid:formValidity\n            })\n     },[]) \n    return [formState,inputHandler,setFormData];\n} "]},"metadata":{},"sourceType":"module"}