{"ast":null,"code":"var _jsxFileName = \"/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { validate } from '../../../utlis/validations/validator';\nimport './input.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators)\n      };\n\n    case 'TOUCH':\n    default:\n      return state;\n  }\n};\n\nexport const Input = _ref => {\n  _s();\n\n  let {\n    name,\n    type = 'text',\n    value,\n    onChange,\n    placeholder,\n    className,\n    style,\n    label,\n    labelClass,\n    id,\n    element,\n    row = 3,\n    errorText,\n    validators\n  } = _ref;\n  let elementType;\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: '',\n    isValid: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      value: event.target.value,\n      validators\n    });\n    console.log('inputState', inputState);\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  if (element === 'input') {\n    elementType = /*#__PURE__*/_jsxDEV(\"input\", {\n      //  name={name} \n      type: type,\n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className} \n      //  style={style} \n      ,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 23\n    }, this);\n  } else if (element === 'textarea') {\n    elementType = /*#__PURE__*/_jsxDEV(\"textarea\", {\n      //  name={name} \n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className} \n      //  style={style} \n      ,\n      id: id,\n      rows: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }, this);\n  } else if (element === 'select') {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control \n    ${!inputState.isValid && 'form-control--invalid'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), elementType, !inputState.isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"yjVxM68sVTGWJpboJ31HHD859b0=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx"],"names":["React","validate","inputReducer","state","action","type","value","isValid","validators","Input","name","onChange","placeholder","className","style","label","labelClass","id","element","row","errorText","elementType","inputState","dispatch","useReducer","changeHandler","event","target","console","log","touchHandler"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { actionCreators } from '../../../store';\nimport { validate } from '../../../utlis/validations/validator';\n\nimport './input.scss'\n\ninterface InputProps {\n    name?: string;\n    type?: string;\n    value?: string;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement>) => void;\n    placeholder?: string;\n    className?: string;\n    style?: object;\n    label?: string;\n    labelClass?: string;\n    id?: string;\n    element?:'input'|'textarea'|'select'\n    row?:number;\n    errorText?:string;\n    validators?:any[]\n}\nconst inputReducer=(state:any,action:any)=>{\n    switch(action.type){\n        case 'CHANGE':\n            return {\n                ...state,\n                value:action.value,\n                isValid:validate(action.value,action.validators)\n            }\n        case 'TOUCH':\n                \n         default:\n            return state   \n    }\n}\nexport const Input:React.FC <InputProps> = ({\n    name,\n    type = 'text',\n    value,\n    onChange,\n    placeholder,\n    className,\n    style,\n    label,\n    labelClass,\n    id,\n    element,\n    row=3,\n    errorText,\n    validators\n}) => {\n    let elementType;\n   const [inputState,dispatch] =React.useReducer(inputReducer,{value:'',isValid:false});\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement|HTMLTextAreaElement|HTMLSelectElement>) => {\n        dispatch({\n            type:'CHANGE',\n            value:event.target.value,\n            validators\n        })\n        console.log('inputState',inputState)\n    }\n    const touchHandler=()=>{\n        dispatch({\n            type:'TOUCH'\n        })\n    }\n    if(element === 'input'){\n        elementType = <input \n                            //  name={name} \n                             type={type} \n                             value={inputState.value} \n                             onChange={changeHandler} \n                             onBlur={touchHandler}\n                             placeholder={placeholder} \n                            //  className={className} \n                            //  style={style} \n                             id={id} \n                             />\n    }else if(element === 'textarea'){\n        elementType = <textarea \n                            //  name={name} \n                            value={inputState.value} \n                            onChange={changeHandler} \n                            onBlur={touchHandler}\n                             placeholder={placeholder} \n                            //  className={className} \n                            //  style={style} \n                             id={id} \n                             rows={row}\n                             />\n    }else if(element === 'select'){\n\n    }\n\n  return (\n    <div className={`form-control \n    ${!inputState.isValid&&'form-control--invalid'}`}>\n        <label htmlFor={id}>{label}</label>\n        {elementType}\n        {!inputState.isValid&&<p>{errorText}</p>}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}