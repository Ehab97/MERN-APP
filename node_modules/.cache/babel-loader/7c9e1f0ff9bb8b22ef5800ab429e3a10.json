{"ast":null,"code":"var _jsxFileName = \"/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { validate } from \"../../../utlis/validations/validator\";\nimport \"./input.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return { ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators)\n      };\n\n    case \"TOUCH\":\n      return { ...state,\n        isTouched: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const Input = _ref => {\n  _s();\n\n  let {\n    name,\n    type = \"text\",\n    inputValue,\n    onInput,\n    placeholder,\n    className,\n    style,\n    label,\n    labelClass,\n    id,\n    element,\n    row = 3,\n    errorText,\n    validators,\n    valid,\n    inputValid\n  } = _ref;\n  let elementType;\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: inputValue || \"\",\n    isValid: inputValid || false,\n    isTouched: false\n  });\n\n  const changeHandler = event => {\n    dispatch({\n      type: \"CHANGE\",\n      value: event.target.value,\n      validators\n    });\n    console.log(\"inputState\", inputState);\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\"\n    });\n  };\n\n  const {\n    value,\n    isValid\n  } = inputState;\n  React.useEffect(() => {\n    onInput === null || onInput === void 0 ? void 0 : onInput(id, value, isValid);\n  }, [id, onInput, value, isValid]);\n\n  if (element === \"input\") {\n    elementType = /*#__PURE__*/_jsxDEV(\"input\", {\n      //  name={name}\n      type: type,\n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className}\n      //  style={style}\n      ,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  } else if (element === \"textarea\") {\n    elementType = /*#__PURE__*/_jsxDEV(\"textarea\", {\n      //  name={name}\n      value: inputState.value,\n      onChange: changeHandler,\n      onBlur: touchHandler,\n      placeholder: placeholder //  className={className}\n      //  style={style}\n      ,\n      id: id,\n      rows: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  } else if (element === \"select\") {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control \n     ${!inputState.isValid && inputState.isTouched ? \"form-control--invalid\" : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), elementType, !inputState.isValid && !inputState.isTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 58\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"kVpQh+7cYB25abKcQakdCwUi3aU=\");\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/components/shared/UIElements/Input.tsx"],"names":["React","validate","inputReducer","state","action","type","value","isValid","validators","isTouched","Input","name","inputValue","onInput","placeholder","className","style","label","labelClass","id","element","row","errorText","valid","inputValid","elementType","inputState","dispatch","useReducer","changeHandler","event","target","console","log","touchHandler","useEffect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,sCAAzB;AAEA,OAAO,cAAP;;;AAoBA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAaC,MAAb,KAA6B;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,KAAK,EAAEF,MAAM,CAACE,KAFT;AAGLC,QAAAA,OAAO,EAAEN,QAAQ,CAACG,MAAM,CAACE,KAAR,EAAeF,MAAM,CAACI,UAAtB;AAHZ,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELM,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF;AACE,aAAON,KAAP;AAbJ;AAeD,CAhBD;;AAiBA,OAAO,MAAMO,KAA2B,GAAG,QAiBrC;AAAA;;AAAA,MAjBsC;AAC1CC,IAAAA,IAD0C;AAE1CN,IAAAA,IAAI,GAAG,MAFmC;AAG1CO,IAAAA,UAH0C;AAI1CC,IAAAA,OAJ0C;AAK1CC,IAAAA,WAL0C;AAM1CC,IAAAA,SAN0C;AAO1CC,IAAAA,KAP0C;AAQ1CC,IAAAA,KAR0C;AAS1CC,IAAAA,UAT0C;AAU1CC,IAAAA,EAV0C;AAW1CC,IAAAA,OAX0C;AAY1CC,IAAAA,GAAG,GAAG,CAZoC;AAa1CC,IAAAA,SAb0C;AAc1Cd,IAAAA,UAd0C;AAe1Ce,IAAAA,KAf0C;AAgB1CC,IAAAA;AAhB0C,GAiBtC;AACJ,MAAIC,WAAJ;AACA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyB3B,KAAK,CAAC4B,UAAN,CAAiB1B,YAAjB,EAA+B;AAC5DI,IAAAA,KAAK,EAAEM,UAAU,IAAE,EADyC;AAE5DL,IAAAA,OAAO,EAAEiB,UAAU,IAAE,KAFuC;AAG5Df,IAAAA,SAAS,EAAE;AAHiD,GAA/B,CAA/B;;AAKA,QAAMoB,aAAa,GACjBC,KADoB,IAIjB;AACHH,IAAAA,QAAQ,CAAC;AACPtB,MAAAA,IAAI,EAAE,QADC;AAEPC,MAAAA,KAAK,EAAEwB,KAAK,CAACC,MAAN,CAAazB,KAFb;AAGPE,MAAAA;AAHO,KAAD,CAAR;AAKAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,UAA1B;AACD,GAXD;;AAYA,QAAMQ,YAAY,GAAG,MAAM;AACzBP,IAAAA,QAAQ,CAAC;AACPtB,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAGD,GAJD;;AAKA,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAgBmB,UAAtB;AACA1B,EAAAA,KAAK,CAACmC,SAAN,CAAgB,MAAI;AAClBtB,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAGM,EAAH,EAAMb,KAAN,EAAYC,OAAZ,CAAP;AACD,GAFD,EAEE,CAACY,EAAD,EAAIN,OAAJ,EAAYP,KAAZ,EAAkBC,OAAlB,CAFF;;AAGA,MAAIa,OAAO,KAAK,OAAhB,EAAyB;AACvBK,IAAAA,WAAW,gBACT;AACE;AACA,MAAA,IAAI,EAAEpB,IAFR;AAGE,MAAA,KAAK,EAAEqB,UAAU,CAACpB,KAHpB;AAIE,MAAA,QAAQ,EAAEuB,aAJZ;AAKE,MAAA,MAAM,EAAEK,YALV;AAME,MAAA,WAAW,EAAEpB,WANf,CAOE;AACA;AARF;AASE,MAAA,EAAE,EAAEK;AATN;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdD,MAcO,IAAIC,OAAO,KAAK,UAAhB,EAA4B;AACjCK,IAAAA,WAAW,gBACT;AACE;AACA,MAAA,KAAK,EAAEC,UAAU,CAACpB,KAFpB;AAGE,MAAA,QAAQ,EAAEuB,aAHZ;AAIE,MAAA,MAAM,EAAEK,YAJV;AAKE,MAAA,WAAW,EAAEpB,WALf,CAME;AACA;AAPF;AAQE,MAAA,EAAE,EAAEK,EARN;AASE,MAAA,IAAI,EAAEE;AATR;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAdM,MAcA,IAAID,OAAO,KAAK,QAAhB,EAA0B,CAChC;;AAED,sBACE;AACE,IAAA,SAAS,EAAG;AAClB,OAAQ,CAACM,UAAU,CAACnB,OAAZ,IAAuBmB,UAAU,CAACjB,SAAnC,GACA,uBADA,GACwB,EAAG,EAH9B;AAAA,4BAME;AAAO,MAAA,OAAO,EAAEU,EAAhB;AAAA,gBAAqBF;AAArB;AAAA;AAAA;AAAA;AAAA,YANF,EAOGQ,WAPH,EAQI,CAACC,UAAU,CAACnB,OAAZ,IAAuB,CAACmB,UAAU,CAACjB,SAApC,iBAAkD;AAAA,gBAAIa;AAAJ;AAAA;AAAA;AAAA;AAAA,YARrD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAxFM;;GAAMZ,K;;KAAAA,K","sourcesContent":["import React from \"react\";\nimport { actionCreators } from \"../../../store\";\nimport { validate } from \"../../../utlis/validations/validator\";\n\nimport \"./input.scss\";\n\ninterface InputProps {\n  name?: string;\n  type?: string;\n  inputValue?: string;\n  onInput?: (x:any,y:any,z:any) => void;\n  placeholder?: string;\n  className?: string;\n  style?: object;\n  label?: string;\n  labelClass?: string;\n  id?: string;\n  element?: \"input\" | \"textarea\" | \"select\";\n  row?: number;\n  errorText?: string;\n  validators?: any[];\n  valid?: boolean;\n  inputValid?: boolean;\n}\nconst inputReducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.value,\n        isValid: validate(action.value, action.validators),\n      };\n    case \"TOUCH\":\n      return {\n        ...state,\n        isTouched: true,\n      };\n    default:\n      return state;\n  }\n};\nexport const Input: React.FC<InputProps> = ({\n  name,\n  type = \"text\",\n  inputValue,\n  onInput,\n  placeholder,\n  className,\n  style,\n  label,\n  labelClass,\n  id,\n  element,\n  row = 3,\n  errorText,\n  validators,\n  valid,\n  inputValid\n}) => {\n  let elementType;\n  const [inputState, dispatch] = React.useReducer(inputReducer, {\n    value: inputValue||\"\",\n    isValid: inputValid||false,\n    isTouched: false,\n  });\n  const changeHandler = (\n    event: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => {\n    dispatch({\n      type: \"CHANGE\",\n      value: event.target.value,\n      validators,\n    });\n    console.log(\"inputState\", inputState);\n  };\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n  const {value,isValid}=inputState\n  React.useEffect(()=>{\n    onInput?.(id,value,isValid)\n  },[id,onInput,value,isValid])\n  if (element === \"input\") {\n    elementType = (\n      <input\n        //  name={name}\n        type={type}\n        value={inputState.value}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        placeholder={placeholder}\n        //  className={className}\n        //  style={style}\n        id={id}\n      />\n    );\n  } else if (element === \"textarea\") {\n    elementType = (\n      <textarea\n        //  name={name}\n        value={inputState.value}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        placeholder={placeholder}\n        //  className={className}\n        //  style={style}\n        id={id}\n        rows={row}\n      />\n    );\n  } else if (element === \"select\") {\n  }\n\n  return (\n    <div\n      className={`form-control \n     ${(!inputState.isValid && inputState.isTouched )?\n       \"form-control--invalid\":''}`\n      }\n    >\n      <label htmlFor={id}>{label}</label>\n      {elementType}\n      {(!inputState.isValid && !inputState.isTouched) && <p>{errorText}</p>}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}