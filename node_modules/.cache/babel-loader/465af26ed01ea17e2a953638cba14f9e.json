{"ast":null,"code":"const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\nexport const VALIDATOR_REQUIRE = () => ({\n  type: VALIDATOR_TYPE_REQUIRE\n});\n_c = VALIDATOR_REQUIRE;\nexport const VALIDATOR_FILE = () => ({\n  type: VALIDATOR_TYPE_FILE\n});\n_c2 = VALIDATOR_FILE;\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\n_c3 = VALIDATOR_MINLENGTH;\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\n_c4 = VALIDATOR_MAXLENGTH;\nexport const VALIDATOR_MIN = val => ({\n  type: VALIDATOR_TYPE_MIN,\n  val: val\n});\n_c5 = VALIDATOR_MIN;\nexport const VALIDATOR_MAX = val => ({\n  type: VALIDATOR_TYPE_MAX,\n  val: val\n});\n_c6 = VALIDATOR_MAX;\nexport const VALIDATOR_EMAIL = () => ({\n  type: VALIDATOR_TYPE_EMAIL\n});\n_c7 = VALIDATOR_EMAIL;\nexport const validate = (value, validators) => {\n  let isValid = true;\n\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n\n  return isValid;\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"VALIDATOR_REQUIRE\");\n$RefreshReg$(_c2, \"VALIDATOR_FILE\");\n$RefreshReg$(_c3, \"VALIDATOR_MINLENGTH\");\n$RefreshReg$(_c4, \"VALIDATOR_MAXLENGTH\");\n$RefreshReg$(_c5, \"VALIDATOR_MIN\");\n$RefreshReg$(_c6, \"VALIDATOR_MAX\");\n$RefreshReg$(_c7, \"VALIDATOR_EMAIL\");","map":{"version":3,"sources":["/Volumes/SSD-Data/Users/mohamed/projects/mern/app/src/utlis/validations/validator.ts"],"names":["VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_MIN","VALIDATOR_TYPE_MAX","VALIDATOR_TYPE_EMAIL","VALIDATOR_TYPE_FILE","VALIDATOR_REQUIRE","type","VALIDATOR_FILE","VALIDATOR_MINLENGTH","val","VALIDATOR_MAXLENGTH","VALIDATOR_MIN","VALIDATOR_MAX","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test"],"mappings":"AAAA,MAAMA,sBAA6B,GAAG,SAAtC;AACA,MAAMC,wBAA+B,GAAG,WAAxC;AACA,MAAMC,wBAA+B,GAAG,WAAxC;AACA,MAAMC,kBAAyB,GAAI,KAAnC;AACA,MAAMC,kBAAyB,GAAG,KAAlC;AACA,MAAMC,oBAA2B,GAAG,OAApC;AACA,MAAMC,mBAA2B,GAAE,MAAnC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAER;AAAR,CAAP,CAA1B;KAAMO,iB;AACb,OAAO,MAAME,cAAc,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAvB;MAAMG,c;AACb,OAAO,MAAMC,mBAAmB,GAAIC,GAAD,KAAc;AAC/CH,EAAAA,IAAI,EAAEP,wBADyC;AAE/CU,EAAAA,GAAG,EAAEA;AAF0C,CAAd,CAA5B;MAAMD,mB;AAIb,OAAO,MAAME,mBAAmB,GAAID,GAAD,KAAc;AAC/CH,EAAAA,IAAI,EAAEN,wBADyC;AAE/CS,EAAAA,GAAG,EAAEA;AAF0C,CAAd,CAA5B;MAAMC,mB;AAIb,OAAO,MAAMC,aAAa,GAAIF,GAAD,KAAc;AAAEH,EAAAA,IAAI,EAAEL,kBAAR;AAA4BQ,EAAAA,GAAG,EAAEA;AAAjC,CAAd,CAAtB;MAAME,a;AACb,OAAO,MAAMC,aAAa,GAAIH,GAAD,KAAc;AAAEH,EAAAA,IAAI,EAAEJ,kBAAR;AAA4BO,EAAAA,GAAG,EAAEA;AAAjC,CAAd,CAAtB;MAAMG,a;AACb,OAAO,MAAMC,eAAe,GAAG,OAAO;AAAEP,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAAxB;MAAMU,e;AAEb,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAYC,UAAZ,KAA+B;AACrD,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,MAAMC,SAAX,IAAwBF,UAAxB,EAAoC;AAClC,QAAIE,SAAS,CAACZ,IAAV,KAAmBR,sBAAvB,EAA+C;AAC7CmB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,GAAsB,CAA3C;AACD;;AACD,QAAIF,SAAS,CAACZ,IAAV,KAAmBP,wBAAvB,EAAiD;AAC/CkB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACT,GAAtD;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBN,wBAAvB,EAAiD;AAC/CiB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACT,GAAtD;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBL,kBAAvB,EAA2C;AACzCgB,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACF,KAAD,IAAUG,SAAS,CAACT,GAAzC;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBJ,kBAAvB,EAA2C;AACzCe,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACF,KAAD,IAAUG,SAAS,CAACT,GAAzC;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBH,oBAAvB,EAA6C;AAC3Cc,MAAAA,OAAO,GAAGA,OAAO,IAAI,iBAAiBI,IAAjB,CAAsBN,KAAtB,CAArB;AACD;AACF;;AACD,SAAOE,OAAP;AACD,CAvBM","sourcesContent":["const VALIDATOR_TYPE_REQUIRE:string = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH:string = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH:string = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN:string  = 'MIN';\nconst VALIDATOR_TYPE_MAX:string = 'MAX';\nconst VALIDATOR_TYPE_EMAIL:string = 'EMAIL';\nconst VALIDATOR_TYPE_FILE :string= 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val:any) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = (val:any) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = (val:any) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val:any) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value:any, validators:any) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"]},"metadata":{},"sourceType":"module"}