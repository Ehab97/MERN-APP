{"version":3,"file":"static/js/360.291dc5d5.chunk.js","mappings":"gVAeaA,EAAqB,WAChC,OAAsDC,EAAAA,EAAAA,KAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAClBC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,GAChC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAO,CACLJ,MAAO,KACPC,SAAS,KAGb,GAnBF,eAAOI,EAAP,KAAkBC,EAAlB,KAsBMC,EAAkB,mCAAG,WACzBC,GADyB,0FAGzBA,EAAMC,iBACNC,QAAQC,IAAI,YAAaN,EAAWZ,GAChCM,EAAQM,EAAUO,OAAOb,MAAMC,MAC/BG,EAAUE,EAAUO,OAAOT,QAAQH,MACnCE,EAAcG,EAAUO,OAAOV,YAAYF,MAC3CI,EAAQC,EAAUO,OAAOR,MAAMJ,MAC/Ba,EAAW,IAAIC,SACfC,EAAUtB,EAAKuB,OACnBH,EAASI,OAAO,QAASlB,GACzBc,EAASI,OAAO,UAAWd,GAC3BU,EAASI,OAAO,cAAef,GAC/BW,EAASI,OAAO,QAASb,GACzBS,EAASI,OAAO,UAAWF,GAC3BL,QAAQC,IAAIZ,EAAOI,EAASD,EAAaE,EAAOW,EAASF,EAAUpB,GAhB1C,oBAkBFF,EAAY,SAAU,OAAQsB,EAAU,CAC3DK,cAAc,UAAD,OAAYzB,EAAK0B,SAnBT,QAkBnBC,EAlBmB,OAqBvBV,QAAQC,IAAIS,GACZxB,EAAS,KAtBc,mDAwBvBc,QAAQC,IAAR,MAxBuB,2DAAH,sDA2BlBU,EAAkB,CACtB/B,MAAAA,EACAgC,QAAS9B,GAEX,OACE,iCACE,SAAC+B,EAAA,GAAD,UAAgBF,IACfhC,IAAa,SAACmC,EAAA,EAAD,CAAgBC,WAAW,KACzC,kBAAMC,UAAU,aAAaC,SAAUpB,EAAvC,WACE,SAACqB,EAAAC,EAAD,CACEC,MAAM,QACNC,QAAQ,QACRC,GAAG,QACHC,QAAS3B,EACT4B,UAAS,0BACTC,WAAY,EAACC,EAAAA,EAAAA,UAEf,SAACR,EAAAC,EAAD,CACEC,MAAM,UACNC,QAAQ,QACRC,GAAG,UACHC,QAAS3B,EACT4B,UAAS,+BACTC,WAAY,EAACC,EAAAA,EAAAA,UAEf,SAACR,EAAAC,EAAD,CACEC,MAAM,cACNC,QAAQ,WACRC,GAAG,cACHC,QAAS3B,EACT4B,UAAS,6CACTC,WAAY,EAACE,EAAAA,EAAAA,IAAoB,OAEnC,SAACC,EAAA,EAAD,CACEN,GAAI,QACJO,QAAQ,EACRN,QAAS3B,EACT4B,UAAW,2BAEb,SAACM,EAAA,EAAD,CAAQC,KAAK,SAASC,UAAWrC,EAAUJ,QAA3C,8BC/FR,EARsB,WAClB,OACG,SAAC0C,EAAA,EAAD,WACK,SAACxD,EAAD","sources":["components/places/NewPlace.tsx","pages/Places.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { Input } from \"../shared/UIElements/Input\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../utlis/validations/validator\";\nimport Button from \"../shared/UIElements/Button\";\nimport { useForm } from \"../../app/hooks/useForm\";\nimport { useHttpClient } from \"../../app/hooks/useHttpClient\";\nimport { AuthContext } from \"../shared/context/auth.context\";\nimport LoadingSpinner from \"../shared/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../shared/UIElements/ErrorModal\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ImageUpload } from \"../shared/form/ImageUpload\";\n\nexport const NewPlace: React.FC = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      address: {\n        value: \"\",\n        isValid: false,\n      },\n      image: {\n        value: null,\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const placeSubmitHandler = async (\n    event: React.FormEvent<HTMLFormElement>\n  ) => {\n    event.preventDefault();\n    console.log(\"formState\", formState, auth); //send this to back end\n    let title = formState.inputs.title.value;\n    let address = formState.inputs.address.value;\n    let description = formState.inputs.description.value;\n    let image = formState.inputs.image.value;\n    let formData = new FormData();\n    let creator = auth.userId;\n    formData.append(\"title\", title);\n    formData.append(\"address\", address);\n    formData.append(\"description\", description);\n    formData.append(\"image\", image);\n    formData.append(\"creator\", creator);\n    console.log(title, address, description, image, creator, formData, auth);\n    try {\n      let res: any = await sendRequest(\"places\", \"POST\", formData, {\n        Authorization: `Bearer ${auth.token}`,\n      });\n      console.log(res);\n      navigate(\"/\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const modalProps: any = {\n    error,\n    onClear: clearError,\n  };\n  return (\n    <>\n      <ErrorModal {...modalProps} />\n      {isLoading && <LoadingSpinner asOverlay={true} />}\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        <Input\n          label=\"Title\"\n          element=\"input\"\n          id=\"title\"\n          onInput={inputHandler}\n          errorText={`please enter valid text`}\n          validators={[VALIDATOR_REQUIRE()]}\n        />\n        <Input\n          label=\"Address\"\n          element=\"input\"\n          id=\"address\"\n          onInput={inputHandler}\n          errorText={`please enter a valid address`}\n          validators={[VALIDATOR_REQUIRE()]}\n        />\n        <Input\n          label=\"Description\"\n          element=\"textarea\"\n          id=\"description\"\n          onInput={inputHandler}\n          errorText={`please enter at least five characters text`}\n          validators={[VALIDATOR_MINLENGTH(5)]}\n        />\n        <ImageUpload\n          id={\"image\"}\n          center={false}\n          onInput={inputHandler}\n          errorText={\"please Enter An image\"}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </>\n  );\n};\n","import React from \"react\";\nimport Layout from '../components/layouts/Layout';\nimport { NewPlace } from \"../components/places/NewPlace\";\n\nconst Places:React.FC=()=>{\n    return(\n       <Layout>\n            <NewPlace/>\n       </Layout>\n    )\n}\n\nexport default Places;"],"names":["NewPlace","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","navigate","useNavigate","useForm","title","value","isValid","description","address","image","formState","inputHandler","placeSubmitHandler","event","preventDefault","console","log","inputs","formData","FormData","creator","userId","append","Authorization","token","res","modalProps","onClear","ErrorModal","LoadingSpinner","asOverlay","className","onSubmit","Input","I","label","element","id","onInput","errorText","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","ImageUpload","center","Button","type","disabled","Layout"],"sourceRoot":""}