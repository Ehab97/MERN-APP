{"version":3,"file":"static/js/388.c8283094.chunk.js","mappings":"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","sources":["components/places/UpdatePlace.tsx","pages/UpdatePlaceView.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Input } from \"../shared/UIElements/Input\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../utlis/validations/validator\";\nimport Button from \"../shared/UIElements/Button\";\nimport { useForm } from \"../../app/hooks/useForm\";\n\nimport Card from \"../shared/UIElements/Card\";\nimport { useHttpClient } from \"../../app/hooks/useHttpClient\";\nimport LoadingSpinner from \"../shared/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"../shared/context/auth.context\";\nimport ErrorModal from \"../shared/UIElements/ErrorModal\";\n\nimport \"../../styles/places.scss\";\n\nconst UpdatePlace: React.FC = () => {\n  const { placeId } = useParams();\n  const auth = useContext(AuthContext);\n  const place = auth.places.find((p) => p._id === placeId);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const navigate = useNavigate();\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: place?.title,\n        isValid: false,\n      },\n      description: {\n        value: place?.description,\n        isValid: false,\n      },\n      address: {\n        value: place?.address,\n        isValid: place ? true : false,\n      },\n      image: {\n        value: place?.image,\n        isValid: false,\n      },\n    },\n    false\n  );\n  React.useEffect(() => {\n    console.log(place);\n    if (place) {\n      setFormData(\n        {\n          title: {\n            value: place.title,\n            isValid: place ? true : false,\n          },\n          description: {\n            value: place.description,\n            isValid: place ? true : false,\n          },\n          address: {\n            value: place.address,\n            isValid: place ? true : false,\n          },\n          image: {\n            value: place?.image,\n            isValid: false,\n          },\n        },\n        true\n      );\n    }\n  }, [setFormData, place]);\n  console.log(useParams());\n  const placeSubmitHandler = async (\n    event: React.FormEvent<HTMLFormElement>\n  ) => {\n    event.preventDefault();\n    let title = formState.inputs.title.value;\n    let description = formState.inputs.description.value;\n    let imageUrl = formState.inputs.image.value;\n    let address = formState.inputs.address.value;\n    console.log(\"formState\", formState); //send this to back end\n    try {\n      let res: any = await sendRequest(\n        `places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({ title, description, address }),\n        {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${auth.token}`,\n        }\n      );\n      console.log(res);\n      navigate(`/${auth.userId}/places`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const modalProps: any = {\n    error,\n    onClear: clearError,\n  };\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <LoadingSpinner asOverlay={true} />\n        </Card>\n      </div>\n    );\n  }\n  if (!place) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2 className=\"text-xl\">Place not found</h2>\n        </Card>\n      </div>\n    );\n  }\n  return (\n    <>\n      <ErrorModal {...modalProps} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        <Input\n          id=\"title\"\n          element=\"input\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please Enter A valid title\"\n          onInput={inputHandler}\n          inputValue={formState.inputs.title.value}\n          inputValid={formState.inputs.title.isValid}\n          valid={true}\n        />\n\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please Enter A valid description at least 5 chars\"\n          onInput={inputHandler}\n          inputValue={formState.inputs.description.value}\n          inputValid={formState.inputs.description.isValid}\n          valid={true}\n        />\n\n        <Input\n          id=\"address\"\n          element=\"textarea\"\n          label=\"Address\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please Enter A valid description at least 5 chars\"\n          onInput={inputHandler}\n          inputValue={formState.inputs.address.value}\n          inputValid={formState.inputs.address.isValid}\n          valid={true}\n        />\n\n        {/*<Input*/}\n        {/*  id=\"imageUrl\"*/}\n        {/*  element=\"textarea\"*/}\n        {/*  label=\"Image\"*/}\n        {/*  validators={[VALIDATOR_MINLENGTH(10)]}*/}\n        {/*  errorText=\"Please Enter A valid description at least 10 chars\"*/}\n        {/*  onInput={inputHandler}*/}\n        {/*  inputValue={formState.inputs.image.value}*/}\n        {/*  inputValid={formState.inputs.image.isValid}*/}\n        {/*  valid={true}*/}\n        {/*/>*/}\n\n        <Button type=\"submit\" disabled={!formState.isValid} inverse={true}>\n          Update Place\n        </Button>\n      </form>\n    </>\n  );\n};\n\nexport default UpdatePlace;\n","import React from 'react';\nimport Layout from '../components/layouts/Layout';\nimport UpdatePlace from '../components/places/UpdatePlace';\n\nconst UpdatePlaceView=()=>{\n    return(\n       <Layout>\n         <UpdatePlace />\n       </Layout>\n    )\n}\nexport default UpdatePlaceView"],"names":["placeId","useParams","auth","useContext","AuthContext","place","places","find","p","_id","useHttpClient","isLoading","error","sendRequest","clearError","navigate","useNavigate","useForm","title","value","isValid","description","address","image","formState","inputHandler","setFormData","React","console","log","placeSubmitHandler","event","preventDefault","inputs","JSON","stringify","Accept","Authorization","token","res","userId","modalProps","onClear","className","Card","LoadingSpinner","asOverlay","ErrorModal","onSubmit","Input","I","id","element","label","validators","VALIDATOR_REQUIRE","errorText","onInput","inputValue","inputValid","valid","VALIDATOR_MINLENGTH","Button","type","disabled","inverse","Layout"],"sourceRoot":""}